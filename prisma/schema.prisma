generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  invoices      Invoice[]
  companies     Company[]
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  suppliers     Supplier[]
  defaultSupplierId String?
  defaultSupplier   Supplier?  @relation("DefaultSupplier", fields: [defaultSupplierId], references: [id], onDelete: SetNull)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName  String?
  address       String?
  taxId         String?
  vatId         String?
  phone         String?
  logoUrl       String?
  bankAccount   String?
  iban          String?
  swift         String?
}

model Company {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  ico           String?   @unique
  dic           String?
  vatId         String?
  address       String?
  city          String?
  zip           String?
  country       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  invoices      Invoice[] @relation("ClientCompany")
}

model Invoice {
  id            String    @id @default(cuid())
  invoiceNumber String
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      String
  client        Company   @relation("ClientCompany", fields: [clientId], references: [id])
  issueDate     DateTime
  dueDate       DateTime
  items         InvoiceItem[]
  totalAmount   Float
  currency      String    @default("CZK")
  status        String    @default("draft") // draft, sent, paid, overdue
  notes         String?
  supplierIco   String?
  supplierDic   String?
  supplierAddress String?
  supplierCity  String?
  supplierZip   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  settings      InvoiceSettings?
}

model InvoiceItem {
  id          String    @id @default(cuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Float
  unitPrice   Float
  taxRate     Float     @default(21)
  total       Float
}

model InvoiceSettings {
  id                String    @id @default(cuid())
  invoiceId         String    @unique
  invoice           Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  paymentMethod     String
  bankAccount       String?
  routingNumber     String?
  constantSymbol    String?
  specificSymbol    String?
  showIBAN          Boolean   @default(false)
  language          String    @default("en")
  color             String    @default("#1e293b")
  style             String    @default("classic")
  reference         String?
  tradeRegisterInfo String?
}

model Supplier {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  ico           String?   @unique
  dic           String?
  vatId         String?
  address       String?
  city          String?
  zip           String?
  country       String?
  bankAccount   String?
  routingNumber String?
  constantSymbol String?
  specificSymbol String?
  tradeRegister  String?
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  defaultForUsers User[]  @relation("DefaultSupplier")
}
